"""Initial migration with all tables

Revision ID: 71e277e658f9
Revises: 
Create Date: 2025-07-16 22:08:32.908871

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '71e277e658f9'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clinics',
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_clinics_name'), 'clinics', ['name'], unique=False)
    op.create_table('customers',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('clinic_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_customers_clinic_id'), 'customers', ['clinic_id'], unique=False)
    op.create_index(op.f('ix_customers_name'), 'customers', ['name'], unique=False)
    op.create_table('success_patterns',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('clinic_id', sa.UUID(), nullable=True),
    sa.Column('pattern_id', sa.String(length=100), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('success_rate', sa.Float(), nullable=False),
    sa.Column('usage_frequency', sa.Integer(), nullable=False),
    sa.Column('effectiveness_score', sa.Float(), nullable=False),
    sa.Column('pattern_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('example_sessions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('learned_from_sessions', sa.Integer(), nullable=False),
    sa.Column('last_updated_from_analysis', sa.DateTime(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_success_patterns_category'), 'success_patterns', ['category'], unique=False)
    op.create_index(op.f('ix_success_patterns_clinic_id'), 'success_patterns', ['clinic_id'], unique=False)
    op.create_index(op.f('ix_success_patterns_id'), 'success_patterns', ['id'], unique=False)
    op.create_index(op.f('ix_success_patterns_pattern_id'), 'success_patterns', ['pattern_id'], unique=True)
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('role', sa.Enum('COUNSELOR', 'MANAGER', 'ADMIN', name='userrole'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('clinic_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinics.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_users_clinic_id'), 'users', ['clinic_id'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('sessions',
    sa.Column('session_date', sa.DateTime(), nullable=False),
    sa.Column('duration_minutes', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('RECORDED', 'TRANSCRIBING', 'TRANSCRIBED', 'ANALYZING', 'ANALYZED', 'COMPLETED', 'FAILED', name='sessionstatus'), nullable=False),
    sa.Column('audio_file_path', sa.String(length=500), nullable=True),
    sa.Column('transcription_text', sa.Text(), nullable=True),
    sa.Column('analysis_result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('customer_id', sa.UUID(), nullable=False),
    sa.Column('counselor_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['counselor_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_sessions_counselor_id'), 'sessions', ['counselor_id'], unique=False)
    op.create_index(op.f('ix_sessions_customer_id'), 'sessions', ['customer_id'], unique=False)
    op.create_index(op.f('ix_sessions_session_date'), 'sessions', ['session_date'], unique=False)
    op.create_table('recordings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('customer_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=True),
    sa.Column('file_path', sa.String(length=500), nullable=False),
    sa.Column('original_filename', sa.String(length=255), nullable=True),
    sa.Column('content_type', sa.String(length=100), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('upload_status', sa.String(length=20), server_default='pending', nullable=False),
    sa.Column('file_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('uploaded_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('file_path')
    )
    op.create_index(op.f('ix_recordings_customer_id'), 'recordings', ['customer_id'], unique=False)
    op.create_index(op.f('ix_recordings_id'), 'recordings', ['id'], unique=False)
    op.create_index(op.f('ix_recordings_session_id'), 'recordings', ['session_id'], unique=False)
    op.create_table('transcription_tasks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('recording_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=True),
    sa.Column('task_id', sa.String(length=100), nullable=False),
    sa.Column('status', sa.String(length=20), server_default='pending', nullable=False),
    sa.Column('progress', sa.Integer(), nullable=False),
    sa.Column('language', sa.String(length=10), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=False),
    sa.Column('transcription_text', sa.Text(), nullable=True),
    sa.Column('transcription_result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('detected_language', sa.String(length=10), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_code', sa.String(length=50), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('estimated_completion', sa.DateTime(), nullable=True),
    sa.Column('estimated_duration', sa.Integer(), nullable=True),
    sa.Column('actual_duration', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['recording_id'], ['recordings.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_transcription_tasks_id'), 'transcription_tasks', ['id'], unique=False)
    op.create_index(op.f('ix_transcription_tasks_recording_id'), 'transcription_tasks', ['recording_id'], unique=False)
    op.create_index(op.f('ix_transcription_tasks_session_id'), 'transcription_tasks', ['session_id'], unique=False)
    op.create_index(op.f('ix_transcription_tasks_task_id'), 'transcription_tasks', ['task_id'], unique=True)
    op.create_table('analysis_tasks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('transcription_task_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=True),
    sa.Column('task_id', sa.String(length=100), nullable=False),
    sa.Column('analysis_type', sa.String(length=20), nullable=False),
    sa.Column('status', sa.String(length=30), server_default='pending', nullable=False),
    sa.Column('progress', sa.Integer(), nullable=False),
    sa.Column('stage', sa.String(length=50), nullable=True),
    sa.Column('focus_areas', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('custom_prompts', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('overall_score', sa.Float(), nullable=True),
    sa.Column('questioning_result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('anxiety_handling_result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('closing_result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('flow_result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('session_summary', sa.Text(), nullable=True),
    sa.Column('key_strengths', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('critical_improvements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('full_analysis_result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('suggestions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('suggestions_generated', sa.Boolean(), nullable=False),
    sa.Column('openai_tokens_used', sa.Integer(), nullable=True),
    sa.Column('openai_cost', sa.Float(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_code', sa.String(length=50), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('estimated_completion', sa.DateTime(), nullable=True),
    sa.Column('estimated_duration', sa.Integer(), nullable=True),
    sa.Column('actual_duration', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['transcription_task_id'], ['transcription_tasks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_analysis_tasks_id'), 'analysis_tasks', ['id'], unique=False)
    op.create_index(op.f('ix_analysis_tasks_session_id'), 'analysis_tasks', ['session_id'], unique=False)
    op.create_index(op.f('ix_analysis_tasks_task_id'), 'analysis_tasks', ['task_id'], unique=True)
    op.create_index(op.f('ix_analysis_tasks_transcription_task_id'), 'analysis_tasks', ['transcription_task_id'], unique=False)
    op.create_table('analysis_feedback',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('analysis_task_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('feedback_type', sa.String(length=20), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=True),
    sa.Column('comments', sa.Text(), nullable=True),
    sa.Column('suggestion_id', sa.String(length=100), nullable=True),
    sa.Column('feedback_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['analysis_task_id'], ['analysis_tasks.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_analysis_feedback_analysis_task_id'), 'analysis_feedback', ['analysis_task_id'], unique=False)
    op.create_index(op.f('ix_analysis_feedback_id'), 'analysis_feedback', ['id'], unique=False)
    op.create_index(op.f('ix_analysis_feedback_user_id'), 'analysis_feedback', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_analysis_feedback_user_id'), table_name='analysis_feedback')
    op.drop_index(op.f('ix_analysis_feedback_id'), table_name='analysis_feedback')
    op.drop_index(op.f('ix_analysis_feedback_analysis_task_id'), table_name='analysis_feedback')
    op.drop_table('analysis_feedback')
    op.drop_index(op.f('ix_analysis_tasks_transcription_task_id'), table_name='analysis_tasks')
    op.drop_index(op.f('ix_analysis_tasks_task_id'), table_name='analysis_tasks')
    op.drop_index(op.f('ix_analysis_tasks_session_id'), table_name='analysis_tasks')
    op.drop_index(op.f('ix_analysis_tasks_id'), table_name='analysis_tasks')
    op.drop_table('analysis_tasks')
    op.drop_index(op.f('ix_transcription_tasks_task_id'), table_name='transcription_tasks')
    op.drop_index(op.f('ix_transcription_tasks_session_id'), table_name='transcription_tasks')
    op.drop_index(op.f('ix_transcription_tasks_recording_id'), table_name='transcription_tasks')
    op.drop_index(op.f('ix_transcription_tasks_id'), table_name='transcription_tasks')
    op.drop_table('transcription_tasks')
    op.drop_index(op.f('ix_recordings_session_id'), table_name='recordings')
    op.drop_index(op.f('ix_recordings_id'), table_name='recordings')
    op.drop_index(op.f('ix_recordings_customer_id'), table_name='recordings')
    op.drop_table('recordings')
    op.drop_index(op.f('ix_sessions_session_date'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_customer_id'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_counselor_id'), table_name='sessions')
    op.drop_table('sessions')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_clinic_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_success_patterns_pattern_id'), table_name='success_patterns')
    op.drop_index(op.f('ix_success_patterns_id'), table_name='success_patterns')
    op.drop_index(op.f('ix_success_patterns_clinic_id'), table_name='success_patterns')
    op.drop_index(op.f('ix_success_patterns_category'), table_name='success_patterns')
    op.drop_table('success_patterns')
    op.drop_index(op.f('ix_customers_name'), table_name='customers')
    op.drop_index(op.f('ix_customers_clinic_id'), table_name='customers')
    op.drop_table('customers')
    op.drop_index(op.f('ix_clinics_name'), table_name='clinics')
    op.drop_table('clinics')
    # ### end Alembic commands ###